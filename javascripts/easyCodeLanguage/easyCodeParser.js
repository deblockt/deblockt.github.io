easyCodeParser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(block) {return block},
        peg$c1 = [],
        peg$c2 = function(codeLines) {return createBlock(codeLines)},
        peg$c3 = peg$FAILED,
        peg$c4 = /^[\n]/,
        peg$c5 = { type: "class", value: "[\\n]", description: "[\\n]" },
        peg$c6 = function() {return undefined},
        peg$c7 = /^[\n \t]/,
        peg$c8 = { type: "class", value: "[\\n \\t]", description: "[\\n \\t]" },
        peg$c9 = function(code) {return code},
        peg$c10 = "vrai",
        peg$c11 = { type: "literal", value: "VRAI", description: "\"VRAI\"" },
        peg$c12 = function() {return true},
        peg$c13 = "faux",
        peg$c14 = { type: "literal", value: "FAUX", description: "\"FAUX\"" },
        peg$c15 = function() {return false},
        peg$c16 = "(",
        peg$c17 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c18 = ")",
        peg$c19 = { type: "literal", value: ")", description: "\")\"" },
        peg$c20 = function(booleanExpression) {booleanExpression.priority = true; return booleanExpression},
        peg$c21 = "!",
        peg$c22 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c23 = function(expr) {return {type : 'reversBoolean', bool : expr}},
        peg$c24 = "==",
        peg$c25 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c26 = "!=",
        peg$c27 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c28 = function(left, oper, right) {return {type : 'comparaison', left : left, right : right, operation : oper}},
        peg$c29 = ">=",
        peg$c30 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c31 = "<=",
        peg$c32 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c33 = "<",
        peg$c34 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c35 = ">",
        peg$c36 = { type: "literal", value: ">", description: "\">\"" },
        peg$c37 = "et",
        peg$c38 = { type: "literal", value: "ET", description: "\"ET\"" },
        peg$c39 = function(left, oper, right) {return CreateArithmetiqueBoolean("&&", left, right)},
        peg$c40 = "ou",
        peg$c41 = { type: "literal", value: "OU", description: "\"OU\"" },
        peg$c42 = function(left, oper, right) {return CreateArithmetiqueBoolean("||", left, right)},
        peg$c43 = "+",
        peg$c44 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c45 = "-",
        peg$c46 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c47 = function(left, oper, right) {return CreateArithmetique(oper, left, right)},
        peg$c48 = "*",
        peg$c49 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c50 = "/",
        peg$c51 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c52 = "%",
        peg$c53 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c54 = function(calc) {calc.priority = true; return calc},
        peg$c55 = "definir",
        peg$c56 = { type: "literal", value: "DEFINIR", description: "\"DEFINIR\"" },
        peg$c57 = function(varname, type) {checkVarName(varname.name); return computeOffset({type : 'command', commandName : 'define', varname : varname, vartype : type})},
        peg$c58 = "ecrire",
        peg$c59 = { type: "literal", value: "ECRIRE", description: "\"ECRIRE\"" },
        peg$c60 = function(expression) {return computeOffset({type : 'command', commandName : 'write', params : [expression]})},
        peg$c61 = "lire",
        peg$c62 = { type: "literal", value: "LIRE", description: "\"LIRE\"" },
        peg$c63 = function(varname) {return computeOffset({type : 'command', commandName : 'read', varname : varname})},
        peg$c64 = "=",
        peg$c65 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c66 = function(varname, expression) {return createAffectation(varname, expression)},
        peg$c67 = "//",
        peg$c68 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c69 = /^[^\n]/,
        peg$c70 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
        peg$c71 = "/*",
        peg$c72 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c73 = /^[^*]/,
        peg$c74 = { type: "class", value: "[^*]", description: "[^*]" },
        peg$c75 = "*/",
        peg$c76 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c77 = "SI",
        peg$c78 = { type: "literal", value: "SI", description: "\"SI\"" },
        peg$c79 = null,
        peg$c80 = "FIN_SI",
        peg$c81 = { type: "literal", value: "FIN_SI", description: "\"FIN_SI\"" },
        peg$c82 = function(expr, blockYes, blockElseIf, blockNo) { return createCondition(expr, blockYes, blockNo, blockElseIf)},
        peg$c83 = "SI_NON",
        peg$c84 = { type: "literal", value: "SI_NON", description: "\"SI_NON\"" },
        peg$c85 = "SI_NON SI",
        peg$c86 = { type: "literal", value: "SI_NON SI", description: "\"SI_NON SI\"" },
        peg$c87 = function(expr, block) {return createCondition(expr, block)},
        peg$c88 = "TANT_QUE",
        peg$c89 = { type: "literal", value: "TANT_QUE", description: "\"TANT_QUE\"" },
        peg$c90 = "FIN_TANT_QUE",
        peg$c91 = { type: "literal", value: "FIN_TANT_QUE", description: "\"FIN_TANT_QUE\"" },
        peg$c92 = function(expr, block) {return {type : 'while', test : expr, block : block, offset : computeOffset()}},
        peg$c93 = "POUR",
        peg$c94 = { type: "literal", value: "POUR", description: "\"POUR\"" },
        peg$c95 = "DE",
        peg$c96 = { type: "literal", value: "DE", description: "\"DE\"" },
        peg$c97 = "A",
        peg$c98 = { type: "literal", value: "A", description: "\"A\"" },
        peg$c99 = "FIN_POUR",
        peg$c100 = { type: "literal", value: "FIN_POUR", description: "\"FIN_POUR\"" },
        peg$c101 = function(varname, start, end, block) {return {type : 'for', varname : varname, start : start, end : end, block : block, offset : computeOffset()}},
        peg$c102 = "DANS",
        peg$c103 = { type: "literal", value: "DANS", description: "\"DANS\"" },
        peg$c104 = function(varname, arrayName, block) {return {type : 'forArray', varname : varname, arrayName : arrayName, block : block}},
        peg$c105 = { type: "other", description: "nom de variable (caract\xE9re acc\xE9pt\xE9s a-z A-Z et _)" },
        peg$c106 = /^[a-zA-Z_]/,
        peg$c107 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
        peg$c108 = "[",
        peg$c109 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c110 = "]",
        peg$c111 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c112 = function(varname, index) {return createVar(varname, index)},
        peg$c113 = function(varname, attribute) {return createVar(varname, undefined, {name : attribute.name})},
        peg$c114 = function(varname) {return createVar(varname)},
        peg$c115 = ".",
        peg$c116 = { type: "literal", value: ".", description: "\".\"" },
        peg$c117 = function(varname) {return varname},
        peg$c118 = function(varname, params, otherAccess) {return ChangeLastAttributeByMethod(varname, params, otherAccess)},
        peg$c119 = function(call) {return call},
        peg$c120 = ",",
        peg$c121 = { type: "literal", value: ",", description: "\",\"" },
        peg$c122 = function(parameter) {return parameter},
        peg$c123 = { type: "other", description: "nom de fonction" },
        peg$c124 = function(functionName) {return functionName.join('')},
        peg$c125 = "nombre",
        peg$c126 = { type: "literal", value: "NOMBRE", description: "\"NOMBRE\"" },
        peg$c127 = function() {return "number"},
        peg$c128 = "chaine",
        peg$c129 = { type: "literal", value: "CHAINE", description: "\"CHAINE\"" },
        peg$c130 = function() {return "string"},
        peg$c131 = "tableau",
        peg$c132 = { type: "literal", value: "TABLEAU", description: "\"TABLEAU\"" },
        peg$c133 = function() {return "array"},
        peg$c134 = "booleen",
        peg$c135 = { type: "literal", value: "BOOLEEN", description: "\"BOOLEEN\"" },
        peg$c136 = function() {return "boolean"},
        peg$c137 = { type: "other", description: "chaine de caract\xE8re" },
        peg$c138 = "\"",
        peg$c139 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c140 = "\\\"",
        peg$c141 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
        peg$c142 = /^[^"]/,
        peg$c143 = { type: "class", value: "[^\"]", description: "[^\"]" },
        peg$c144 = function(string) {return string.join('')},
        peg$c145 = "'",
        peg$c146 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c147 = "\\'",
        peg$c148 = { type: "literal", value: "\\'", description: "\"\\\\'\"" },
        peg$c149 = /^[^']/,
        peg$c150 = { type: "class", value: "[^']", description: "[^']" },
        peg$c151 = { type: "other", description: "caract\xE8re exemple : 'a'" },
        peg$c152 = { type: "any", description: "any character" },
        peg$c153 = function(car) {return car},
        peg$c154 = { type: "other", description: "integer" },
        peg$c155 = /^[0-9]/,
        peg$c156 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c157 = function(digits) { return parseInt(digits.join(""), 10); },
        peg$c158 = { type: "other", description: "espace" },
        peg$c159 = /^[ \t]/,
        peg$c160 = { type: "class", value: "[ \\t]", description: "[ \\t]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseblock();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseblock() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecodeLine();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecodeLine();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c2(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecodeLine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseeatSpace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedefine();
        if (s2 === peg$FAILED) {
          s2 = peg$parseifblock();
          if (s2 === peg$FAILED) {
            s2 = peg$parsewhileblock();
            if (s2 === peg$FAILED) {
              s2 = peg$parseforeachblock();
              if (s2 === peg$FAILED) {
                s2 = peg$parseoneLineComment();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsemultilineComment();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseecrire();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parselire();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseaffectation();
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          if (peg$c4.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                          }
                          if (s3 !== peg$FAILED) {
                            peg$reportedPos = s2;
                            s3 = peg$c6();
                          }
                          s2 = s3;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c7.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c7.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c9(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression() {
      var s0;

      s0 = peg$parsenotPrioritaryBoolean();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenotPrioritary();
      }

      return s0;
    }

    function peg$parsecomparaisonMembre() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c10) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c12();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c13) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c15();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$parsevarName();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenotPrioritary();
          }
        }
      }

      return s0;
    }

    function peg$parsebooleanPrimary() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c10) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c12();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c13) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c15();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$parsemethodCall();
          if (s0 === peg$FAILED) {
            s0 = peg$parsevarName();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c16;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseeatSpace();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsenotPrioritaryBoolean();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseeatSpace();
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s5 = peg$c18;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c19); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c20(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 33) {
                  s1 = peg$c21;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseeatSpace();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsecomparaison();
                    if (s3 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c23(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecomparaison() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsebooleanPrimary();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeatSpace();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c24) {
            s3 = peg$c24;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c26) {
              s3 = peg$c26;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeatSpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebooleanPrimary();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c28(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenotPrioritary();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseeatSpace();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c29) {
              s3 = peg$c29;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c31) {
                s3 = peg$c31;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                  s3 = peg$c33;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s3 = peg$c35;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c36); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c24) {
                      s3 = peg$c24;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c25); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c26) {
                        s3 = peg$c26;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c27); }
                      }
                    }
                  }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseeatSpace();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsenotPrioritary();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c28(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsenotPrioritary();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebooleanPrimary();
          }
        }
      }

      return s0;
    }

    function peg$parsenotPrioritaryBoolean() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepriotaryBoolean();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeatSpace();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c37) {
            s3 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeatSpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenotPrioritaryBoolean();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c39(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsepriotaryBoolean();
      }

      return s0;
    }

    function peg$parsepriotaryBoolean() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecomparaison();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeatSpace();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c40) {
            s3 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeatSpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepriotaryBoolean();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c42(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsecomparaison();
      }

      return s0;
    }

    function peg$parsenotPrioritary() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepriotary();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeatSpace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s3 = peg$c43;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s3 = peg$c45;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeatSpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenotPrioritary();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c47(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsepriotary();
      }

      return s0;
    }

    function peg$parsepriotary() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseprimitive();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeatSpace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s3 = peg$c48;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s3 = peg$c50;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s3 = peg$c52;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c53); }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeatSpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepriotary();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c47(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseprimitive();
      }

      return s0;
    }

    function peg$parseprimitive() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parsestring();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecar();
        if (s0 === peg$FAILED) {
          s0 = peg$parseinteger();
          if (s0 === peg$FAILED) {
            s0 = peg$parsemethodCall();
            if (s0 === peg$FAILED) {
              s0 = peg$parsevarName();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                  s1 = peg$c16;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseeatSpace();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsenotPrioritary();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseeatSpace();
                      if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s5 = peg$c18;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c19); }
                        }
                        if (s5 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c54(s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedefine() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c55) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanySpace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevarName();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseanySpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetypes();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c57(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseecrire() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c58) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanySpace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c60(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parselire() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c61) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanySpace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevarName();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c63(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseaffectation() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsevarName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeatSpace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c64;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeatSpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c66(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseoneLineComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c67) {
        s1 = peg$c67;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c69.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c69.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c6();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsemultilineComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c71) {
        s1 = peg$c71;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c73.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c73.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c75) {
            s3 = peg$c75;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c76); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c6();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseifblock() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c77) {
        s1 = peg$c77;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanySpace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenotPrioritaryBoolean();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeatSpace();
            if (s4 !== peg$FAILED) {
              if (peg$c4.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseblock();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseifelseifblock();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseifelseifblock();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseifelseblock();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c79;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c80) {
                        s9 = peg$c80;
                        peg$currPos += 6;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c81); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c82(s3, s6, s7, s8);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseifelseblock() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c83) {
        s1 = peg$c83;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeatSpace();
        if (s2 !== peg$FAILED) {
          if (peg$c4.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseblock();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c0(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseifelseifblock() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c85) {
        s1 = peg$c85;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanySpace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenotPrioritaryBoolean();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeatSpace();
            if (s4 !== peg$FAILED) {
              if (peg$c4.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseblock();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c87(s3, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsewhileblock() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c88) {
        s1 = peg$c88;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanySpace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenotPrioritaryBoolean();
          if (s3 !== peg$FAILED) {
            if (peg$c4.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseblock();
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 12) === peg$c90) {
                  s6 = peg$c90;
                  peg$currPos += 12;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c92(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseforeachblock() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c93) {
        s1 = peg$c93;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanySpace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevarName();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseanySpace();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c95) {
                s5 = peg$c95;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c96); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseanySpace();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseinteger();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsecar();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseanySpace();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 65) {
                        s9 = peg$c97;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c98); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseanySpace();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseinteger();
                          if (s11 === peg$FAILED) {
                            s11 = peg$parsecar();
                          }
                          if (s11 !== peg$FAILED) {
                            if (peg$c4.test(input.charAt(peg$currPos))) {
                              s12 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c5); }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseblock();
                              if (s13 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 8) === peg$c99) {
                                  s14 = peg$c99;
                                  peg$currPos += 8;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c100); }
                                }
                                if (s14 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c101(s3, s7, s11, s13);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c3;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c3;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c93) {
          s1 = peg$c93;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c94); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseanySpace();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsevarName();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseanySpace();
              if (s4 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c102) {
                  s5 = peg$c102;
                  peg$currPos += 4;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseanySpace();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsevarName();
                    if (s7 !== peg$FAILED) {
                      if (peg$c4.test(input.charAt(peg$currPos))) {
                        s8 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseblock();
                        if (s9 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 8) === peg$c99) {
                            s10 = peg$c99;
                            peg$currPos += 8;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c100); }
                          }
                          if (s10 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c104(s3, s7, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsevarName() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c106.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c106.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
        }
      } else {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeatSpace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s3 = peg$c108;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c109); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeatSpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseinteger();
              if (s5 === peg$FAILED) {
                s5 = peg$parsestring();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsecar();
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseeatSpace();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s7 = peg$c110;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c111); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c112(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c106.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c106.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c107); }
            }
          }
        } else {
          s1 = peg$c3;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseeatSpace();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseattributAccess();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c113(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          if (peg$c106.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c106.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c107); }
              }
            }
          } else {
            s1 = peg$c3;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c114(s1);
          }
          s0 = s1;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }

      return s0;
    }

    function peg$parseattributAccess() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c115;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevarName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c117(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsemethodCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsevarName();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseeatSpace();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsefunctionParameters();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsefunctionParameters();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseeatSpace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c18;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsehaveOtherAccess();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c79;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c118(s1, s4, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsehaveOtherAccess() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c115;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemethodCall();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c119(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c115;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsevarName();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c117(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsefunctionParameters() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseexpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeatSpace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c120;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeatSpace();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c122(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpression();
      }

      return s0;
    }

    function peg$parsefunctionName() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c106.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c106.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
        }
      } else {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c124(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }

      return s0;
    }

    function peg$parsetypes() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c125) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c127();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c130();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c131) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c132); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c133();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c134) {
              s1 = input.substr(peg$currPos, 7);
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c135); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c136();
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c138;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.substr(peg$currPos, 2) === peg$c140) {
          s3 = peg$c140;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c141); }
        }
        if (s3 === peg$FAILED) {
          if (peg$c142.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c143); }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.substr(peg$currPos, 2) === peg$c140) {
            s3 = peg$c140;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c141); }
          }
          if (s3 === peg$FAILED) {
            if (peg$c142.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c143); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c138;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c139); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c144(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c145;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c146); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s3 = peg$c147;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c148); }
          }
          if (s3 === peg$FAILED) {
            if (peg$c149.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c150); }
            }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (input.substr(peg$currPos, 2) === peg$c147) {
              s3 = peg$c147;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c148); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c149.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c150); }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c145;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c146); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c144(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsemethodCall();
          if (s0 === peg$FAILED) {
            s0 = peg$parsevarName();
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }

      return s0;
    }

    function peg$parsecar() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c145;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c146); }
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c152); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c145;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c146); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c153(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsemethodCall();
        if (s0 === peg$FAILED) {
          s0 = peg$parsevarName();
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c155.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c155.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c156); }
          }
        }
      } else {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c157(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parsemethodCall();
        if (s0 === peg$FAILED) {
          s0 = peg$parsevarName();
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c154); }
      }

      return s0;
    }

    function peg$parseanySpace() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c159.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c160); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c159.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c160); }
          }
        }
      } else {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }

      return s0;
    }

    function peg$parseeatSpace() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c159.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c160); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c159.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c160); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6();
      }
      s0 = s1;

      return s0;
    }


    	/**
    	 * emlation of indexOf for old navigator
    	 */
    	if (!Array.indexOf) {
    	  Array.indexOf = [].indexOf ?
    		  function (arr, obj, from) { return arr.indexOf(obj, from); }:
    		  function (arr, obj, from) { // (for IE6)
    			var l = arr.length,
    				i = from ? parseInt( (1*from) + (from<0 ? l:0), 10) : 0;
    			i = i<0 ? 0 : i;
    			for (; i<l; i++) {
    			  if (i in arr  &&  arr[i] === obj) { return i; }
    			}
    			return -1;
    		  };
    	}
    	
    	if(!Array.isArray) {
    	  Array.isArray = function(arg) {
    		return Object.prototype.toString.call(arg) === '[object Array]';
    	  };
    	}
    	
    	/**
    	 * create object with the current line and column
    	 */
    	function computeOffset(param) {
    		if (param) {
    			param.offset = computeOffset();
    			return param;
    		}
    		return {line : line(), column : column(), offset : offset()};
    	}
    	
    	/**
    	 * create of block of instruction
    	 */
    	function createBlock(lines) {
    		var ret = [];
    		for (var i in lines) {
    			if (lines[i]) {
    				ret.push(lines[i]);
    				// check declare and var usage
    			}
    		}
    		
    		return ret;
    	}
    	
    	/**
    	 * create a condition structure
    	 */
    	function createCondition(test, yes, no, elseif) {
    		var condition = {
    			type : 'condition',
    			test : test,
    			yes : yes,
    			offset : computeOffset()
    		};
    		var currentIf = condition;
    		if (elseif && elseif.length > 0) {
    			for (var i in elseif) {
    				currentIf.no = [elseif[i]];
    				currentIf = elseif[i];
    			}
    		}
    		currentIf.no = no;
    		return condition;
    	}
    	
    	/**
    	 * créé une action d'affectation
    	 */
    	function createAffectation(varname, expression) {
    		return {type : 'command', commandName : 'affectation', varname : varname, expression : expression, offset : computeOffset()};
    	}
    	
    	function createVar(name, index, attribute) {
    		if (Array.isArray(name)) {
    			name = name.join('');
    		}
    		
    		return {
    			type : 'var',
    			name : name.toUpperCase(),
    			offset : computeOffset(),
    			index : index,
    			attribute : attribute
    		}
    	}
    	
    	var languageKeyWord = ['VRAI', 'FAUX', 'NULL', 'PARENT']
    	function checkVarName(varname) {
    		if (Array.indexOf(languageKeyWord, varname) >= 0) {
    			throw new SyntaxError(varname + ' et un nom reservé.');
    		}
    	}
    	
    	// priority of operations
    	var operationPriority = {
    		"-" : 1,
    		"+" : 1,
    		"&&" : 3,
    		"||" : 2,
    		"*" : 0,
    		"/" : 0,
    		"%" : 0
    	}
    	
    	/**
    	 * create an arithmetique or boolean instruction
    	 */
    	function CreateOperation(operation, left, right, type) {
    		if (right 
    				&& right.operation 
    				&& !right.priority 
    				&& operationPriority[right.operation] == operationPriority[operation]
    				&& right.type == type
    			) {
    			// récupération de l'element le plus à droites
    			// il faut en fait ajouter l'operation à la gauche de l'operation de droit
    			// mostLeft représente le dernier objet qui a un element à gauche
    			var mostLeft = right;
    			while (mostLeft.left.left && !mostLeft.left.priority && mostLeft.left.type == mostLeft.type) {
    				mostLeft = mostLeft.left;
    			}
    			
    			// on va recréer l'operation courrante dans la partie la plus à gauche
    			mostLeft.left = CreateArithmetique(operation, left , mostLeft.left);
    			return right;
    		}
    		
    		return {
    			type : type,
    			priority : false,
    			operation : operation,		
    			left : left,
    			right : right,
    			offset : computeOffset()
    		}
    	}
    	
    	function CreateArithmetique(operation, left, right) {
    		return CreateOperation(operation, left, right, "numerique");
    	}
    	
    	function CreateArithmetiqueBoolean(operation, left, right) {
    		return CreateOperation(operation, left, right, "boolean");
    	}
    	
    	/**
    	 * call when a function is call on a other function
    	 * as test.test().test()
    	 */
    	function ChangeLastAttributeByMethod(variable, methodParameters, nextAccess) {
    		var varForAddnextAccess = null;
    		if (!variable.attribute) {
    			variable.type = "function"
    			variable.params = methodParameters;
    			varForAddnextAccess = variable;
    		} else {		
    			var lastAttribute = variable;
    			while (variable.attribute && variable.attribute.attribute) {
    				lastAttribute = variable.attribute;
    			}
    			
    			lastAttribute.method = {
    				name : lastAttribute.attribute.name,
    				params : methodParameters
    			};
    			
    			delete lastAttribute.attribute;
    			varForAddnextAccess = lastAttribute;
    		}
    		
    		if (nextAccess) {
    			if (nextAccess.type == "function") {
    				varForAddnextAccess.method = nextAccess;
    				delete nextAccess.type;
    			} else {
    				varForAddnextAccess.attribute = nextAccess;
    			}
    		}
    		
    		return variable;
    	}
    	
    	


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();

if (define) {
  define(function(){
    return easyCodeParser;
  })
}